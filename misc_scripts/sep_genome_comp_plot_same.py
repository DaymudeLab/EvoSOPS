import matplotlib.pyplot as plt
import numpy as np
from cmcrameri.cm import batlow
import matplotlib.ticker as tkr     # has classes for tick-locating and -formatting

def numfmt(x, pos): # your custom formatter function: divide by 100.0
    s = '{}'.format(x / 1000.0)
    return s

yfmt = tkr.FuncFormatter(numfmt)    # create your custom formatter function


ga_same_probs =  {'-3': [1, 8, 63, 8, 1, 2, 250, 8, 1, 4, 8, 1, 16, 250, 31, 1, 4, 250, 31, 1, 1, 16, 1, 63], '-2': [1, 250, 16, 500, 1, 4, 16, 250, 2, 4, 31, 8, 31, 500, 1, 250, 31, 4, 16, 2, 63, 1000, 250, 2, 8, 8, 1000, 8, 63, 1, 1, 2, 500, 31, 8, 500, 125, 125, 250, 500, 4, 16, 1, 1, 125, 500, 2, 4, 250, 16, 1, 63, 2, 16, 31, 31, 2, 1, 4, 4, 4, 4, 31, 16, 31, 8], '-1': [4, 1000, 4, 8, 2, 31, 63, 63, 31, 31, 1000, 63, 8, 2, 4, 8, 2, 2, 1000, 4, 16, 4, 16, 1000, 16, 125, 4, 16, 2, 4, 2, 125, 500, 125, 4, 1000, 63, 63, 2, 16, 1, 2, 8, 63, 2, 1000, 4, 31, 250, 4, 4, 1, 500, 1, 8, 2, 16, 63, 4, 31, 500, 8, 31, 63, 250, 1000, 63, 250, 250, 63, 500, 500, 31, 1000, 63, 31, 125, 2, 8, 4, 125, 4, 63, 31, 8, 125, 250, 125, 8, 4, 8, 2, 31, 4, 31, 16, 8, 125, 1000, 8, 1, 1, 8, 1000, 8, 31, 8, 2, 4, 8, 125, 31, 4, 1, 31, 16, 8, 63, 2, 1], '0': [500, 500, 16, 500, 500, 2, 1000, 2, 16, 500, 1000, 1000, 63, 4, 500, 63, 4, 500, 1000, 31, 4, 63, 500, 1000, 2, 4, 16, 500, 1000, 16, 31, 500, 1000, 8, 4, 1000, 31, 1, 1000, 250, 1000, 250, 8, 1000, 250, 1, 31, 8, 2, 1000, 8, 63, 500, 1000, 500, 8, 500, 63, 1000, 500, 500, 1, 8, 8, 1000, 250, 2, 500, 4, 500, 4, 250, 63, 500, 8, 16, 125, 4, 8, 31, 125, 2, 1000, 31, 2, 1000, 125, 8, 16, 1000, 63, 31, 500, 1, 1000, 16, 8, 8, 16, 1, 1, 16, 1000, 125, 16, 8, 2, 250, 31, 63, 500, 1000, 4, 63, 1000, 125, 8, 16, 125, 16, 125, 250, 2, 63, 31, 8, 125, 2, 500, 125, 8, 16, 500, 125, 1000, 1000, 4, 4, 4, 1000, 63, 63, 63, 250, 31, 4, 63, 250, 8, 16, 8, 31, 500, 250, 8, 31, 1, 1, 500, 2, 4, 4, 8, 1, 1, 1, 63, 1000, 4, 16, 250, 63, 8, 250, 250, 125, 8, 8, 4, 63], '1': [1000, 8, 1, 125, 1000, 2, 31, 500, 1000, 63, 4, 31, 250, 125, 1000, 500, 125, 1000, 1000, 8, 1000, 500, 1000, 31, 1000, 63, 1000, 1000, 500, 500, 63, 250, 1, 125, 1000, 4, 31, 1000, 1000, 16, 63, 250, 8, 4, 1000, 1000, 1000, 250, 4, 1000, 1, 1000, 1000, 250, 125, 250, 63, 500, 31, 63, 500, 8, 8, 500, 500, 125, 16, 31, 63, 16, 1000, 1000, 31, 2, 31, 16, 125, 4, 500, 1000, 1000, 8, 63, 250, 4, 2, 16, 1000, 63, 63, 8, 250, 500, 500, 31, 500, 1000, 16, 2, 1000, 125, 125, 63, 500, 63, 4, 125, 1, 63, 4, 2, 4, 2, 4, 1, 125, 63, 63, 1000, 250], '2': [500, 125, 1000, 1000, 125, 1000, 500, 1000, 1000, 500, 1000, 1000, 250, 1000, 31, 1000, 250, 63, 63, 250, 1000, 1000, 1000, 1000, 1, 8, 2, 4, 2, 16, 250, 1, 500, 4, 250, 16, 63, 16, 1000, 1, 1000, 125, 2, 1000, 1000, 1000, 125, 500, 31, 4, 1000, 1000, 1000, 1000, 4, 63, 2, 1000, 1000, 250, 8, 1000, 500, 1000, 8, 1000], '3': [2, 1, 1000, 1000, 4, 250, 2, 250, 500, 63, 1000, 500, 1, 1000, 250, 31, 1000, 1000, 1, 63, 500, 2, 1000, 125]}

th_same_probs = {'-3': [16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5], '-2': [63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5],'-1': [250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5], '0': [1000, 667, 444, 296, 1000, 667, 444, 296, 1000, 667, 444, 296, 1000, 667, 444, 296, 1000, 667, 444, 296, 1000, 667, 444, 296, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 250, 167, 111, 74, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 63, 42, 28, 19, 1000, 1000, 1000, 1000, 1000, 1000, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5, 16, 10, 7, 5], '1': [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 1000, 667, 444, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 250, 167, 111, 1000, 1000, 1000, 1000, 1000, 1000, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28, 63, 42, 28], '2': [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 1000, 667, 1000, 1000, 1000, 1000, 1000, 1000, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167, 250, 167], '3': [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000] }

ga_prob = ga_same_probs.values()

th_prob = th_same_probs.values()
# the list named ticks, summarizes or groups
# the summer and winter rainfall as low, mid
# and high
ticks = ga_same_probs.keys()

# create a boxplot for two arrays separately,
# the position specifies the location of the
# particular box in the graph,
# this can be changed as per your wish. Use width
# to specify the width of the plot
ga_prob_plot = plt.boxplot(ga_prob,positions=np.array(np.arange(len(ga_prob)))*2.0-0.25,widths=0.3, showfliers=False, medianprops={"linewidth": 2.5})
# *2.0-0.35
th_prob_plot = plt.boxplot(th_prob,positions=np.array(np.arange(len(th_prob)))*2.0+0.25, widths=0.3,  showfliers=False, medianprops={"linewidth": 2.5})
# *2.0+0.35
# each plot returns a dictionary, use plt.setp()
# function to assign the color code
# for all properties of the box plot of particular group
# use the below function to set color for particular group,
# by iterating over all properties of the box plot
def define_box_properties(plot_name, color_code, label):
	for k, v in plot_name.items():
		plt.setp(plot_name.get(k), color=color_code)
		
	# use plot function to draw a small line to name the legend.
	plt.plot([], c=color_code, label=label)
	plt.legend()


# setting colors for each groups
define_box_properties(ga_prob_plot, batlow(0.4), 'GA') #'#D7191C'
define_box_properties(th_prob_plot, batlow(0.6), 'Theory') #'#2C7BB6'

# set the x label values
plt.xticks(np.arange(0, len(ticks) * 2, 2), ticks)

# set the limit for x axis
plt.xlim(-2, len(ticks)*2)

# set the limit for y axis

plt.semilogy(base=2)
plt.gca().yaxis.set_major_formatter(yfmt)
# plt.ylim(-0.20, 1.1)

plt.xlabel(r"Change in Homogeneous Neighbors $h' - h$") #, color=batlow(0.1))
plt.ylabel('Move Probability') #, color=batlow(0.1))

# set the title
plt.title('Separation Genomic Composition')

plt.savefig('output/Sep_gene_comp_same.png', dpi=300, bbox_inches='tight')
# plt.show()